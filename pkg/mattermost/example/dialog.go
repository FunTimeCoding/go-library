package example

import (
	"context"
	"fmt"
	"github.com/funtimecoding/go-library/pkg/mattermost"
	"github.com/funtimecoding/go-library/pkg/notation"
	"github.com/funtimecoding/go-library/pkg/strings/join"
	"github.com/funtimecoding/go-library/pkg/system"
	"github.com/funtimecoding/go-library/pkg/text/multi_line"
	"github.com/funtimecoding/go-library/pkg/web"
	"github.com/funtimecoding/go-library/pkg/web/request_context"
	"github.com/mattermost/mattermost-server/v6/model"
	"net/http"
)

func Dialog() {
	w := http.NewServeMux()
	w.HandleFunc(
		"/dialog",
		func(
			w http.ResponseWriter,
			e *http.Request,
		) {
			c := request_context.New(w, e)
			c.SetLastLocation()
			l := multi_line.New()
			l.Format("Raw query: %s", c.Request().URL.RawQuery)

			for k, v := range c.Request().Header {
				l.Format("Header: %s=%s", k, join.Comma(v))
			}

			b := c.Body()
			l.Format("Body: %s", b)

			r := &model.PostActionIntegrationRequest{}
			notation.DecodeStrict(b, r, false)
			l.Format("Decoded request: %+v", r)

			response := &model.PostActionIntegrationResponse{
				EphemeralText: "You updated the post!",
			}

			if false {
				response.Update = &model.Post{
					Message: "Updated message text!",
				}
			}

			c.WriteOkay(notation.Encode(response, false))
			fmt.Println("Request receive:")
			fmt.Println(l.Render())
		},
	)
	s := web.ListenAsynchronous(w)
	m := mattermost.NewEnvironment()

	if true {
		h := m.DefaultChannel()
		p := &model.Post{
			ChannelId: h.Id,
			Message:   "Some message with buttons",
		}
		model.ParseSlackAttachment(
			p,
			[]*model.SlackAttachment{
				{
					AuthorName: "alpha",
					Title:      "bravo",
					Text:       "charlie",
					Color:      "#36a64f",
					Fields: []*model.SlackAttachmentField{
						{
							Title: "Current Version",
							Value: "v2.1.0",
							Short: true,
						},
						{
							Title: "Target Version",
							Value: "v2.2.1",
							Short: true,
						},
					},
					Actions: []*model.PostAction{
						{
							Id:    "yes", // Cannot contain underscore
							Name:  "Yes",
							Type:  model.PostActionTypeButton,
							Style: "primary",
							Integration: &model.PostActionIntegration{
								Context: model.StringInterface{
									"action":  "update_server",
									"server":  "prod-web-01",
									"version": "v2.2.1",
								},
								URL: "http://localhost:8080/callback", // Must return JSON
							},
						},
						{
							Id:    "cancel", // Cannot contain underscore
							Name:  "Cancel",
							Type:  model.PostActionTypeButton,
							Style: "danger",
							Integration: &model.PostActionIntegration{
								Context: model.StringInterface{
									"action":  "cancel_update",
									"server":  "prod-web-01",
									"version": "v2.2.1",
								},
								URL: "http://localhost:8080/callback", // Must return JSON
							},
						},
					},
				},
			},
		)
		m.Post(p)
	}

	if false {
		elements := []model.DialogElement{
			{
				DisplayName: "",
				Name:        "",
				Type:        "",
				SubType:     "",
				Default:     "",
				Placeholder: "",
				HelpText:    "",
				Optional:    false,
				MinLength:   0,
				MaxLength:   0,
				DataSource:  "",
				Options:     nil,
			},
		}
		fmt.Printf("Dialog elements: %d\n", len(elements))
	}

	if false {
		m.OpenDialog(
			model.OpenDialogRequest{
				TriggerId: "", // Generated by server
				URL:       "http://localhost:8080/dialog",
				Dialog: model.Dialog{
					CallbackId:       "myOwnId", // Probably used to identify the dialog when the callback arrives
					Title:            "Maximum 24 characters",
					IntroductionText: "Markdown formatted text",
					IconURL:          "",    // Optional
					Elements:         nil,   // Should be enough to have a submit and cancel button
					SubmitLabel:      "",    // Optional
					NotifyOnCancel:   false, // Optional
					State:            "",    // Optional
				},
			},
		)
	}

	if false {
		m.SubmitDialog(
			model.SubmitDialogRequest{
				Type:       "",
				URL:        "",
				CallbackId: "",
				State:      "",
				UserId:     "",
				ChannelId:  m.DefaultChannel().Id,
				TeamId:     m.DefaultTeam().Id,
				Submission: nil,
				Cancelled:  false,
			},
		)
	}

	fmt.Println("Cancel server with Ctrl-C")
	system.KillSignalBlock()
	fmt.Println("Shutdown server")
	web.GracefulShutdown(context.Background(), s, false)
}
