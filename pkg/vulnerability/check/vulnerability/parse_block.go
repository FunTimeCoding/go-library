package vulnerability

import (
	"fmt"
	"github.com/funtimecoding/go-library/pkg/notation"
	"github.com/funtimecoding/go-library/pkg/vulnerability"
	"github.com/funtimecoding/go-library/pkg/vulnerability/osv"
)

func ParseBlock(
	s string,
	m *vulnerability.Message,
) {
	fmt.Printf("Block: %s\n", s)
	var found bool

	for _, t := range []any{
		&vulnerability.Message{},
		&vulnerability.Config{},
		&vulnerability.SBOM{},
		&vulnerability.Finding{},
		&vulnerability.Module{},
		&vulnerability.Frame{},
		&vulnerability.Progress{},
		&vulnerability.Position{},
		&osv.Entry{},
	} {
		e := notation.DecodeBytes([]byte(s), &t)

		if e != nil {
			continue
		}

		switch v := t.(type) {
		case *vulnerability.Message:
			if hasFieldSet(v) {
				fmt.Printf("Found field set: %+v\n", v)
			}

			if v.OSV != nil {
				found = true
				m.OSV = v.OSV
				fmt.Printf("OSV in message: %+v\n", v.OSV)
			}

			if v.Config != nil {
				found = true
				m.Config = v.Config
				fmt.Printf("Config in message: %+v\n", v.Config)
			}

			if v.SBOM != nil {
				found = true
				m.SBOM = v.SBOM
				fmt.Printf("SBOM in message: %+v\n", v.SBOM)
			}

			if v.Finding != nil {
				found = true
				m.Finding = v.Finding
				fmt.Printf("Finding in message: %+v\n", v.Finding)
			}

			if v.Progress != nil {
				found = true
				m.Progress = v.Progress
				fmt.Printf("Progress in message: %+v\n", v.Progress)
			}
		case *vulnerability.Config:
			if v.ProtocolVersion == "" {
				notEmptyCheck(v)

				continue
			}

			found = true
			m.Config = v
			fmt.Printf("Config: %+v\n", v)
		case *vulnerability.SBOM:
			if v.GoVersion == "" {
				notEmptyCheck(v)

				continue
			}

			found = true
			m.SBOM = v
			fmt.Printf("SBOM: %+v\n", v)
		case *vulnerability.Finding:
			if v.OSV == "" {
				notEmptyCheck(v)

				continue
			}

			found = true
			m.Finding = v
			fmt.Printf("Finding: %+v\n", v)
		case *vulnerability.Frame:
			if v.Module == "" {
				notEmptyCheck(v)

				continue
			}

			found = true
			m.Finding.Trace = append(m.Finding.Trace, v)
			fmt.Printf("Frame: %+v\n", v)
		case *vulnerability.Progress:
			if v.Message == "" {
				notEmptyCheck(v)

				continue
			}

			found = true
			m.Progress = v
			fmt.Printf("Progress: %+v\n", v)
		case *vulnerability.Module:
			if v.Path == "" {
				notEmptyCheck(v)

				continue
			}

			found = true

			if m.SBOM != nil {
				m.SBOM.Modules = append(m.SBOM.Modules, v)
			}
		case *vulnerability.Position:
			if v.Filename == "" {
				notEmptyCheck(v)

				continue
			}

			found = true

			if m.Finding != nil && len(m.Finding.Trace) > 0 {
				lastIndex := len(m.Finding.Trace) - 1
				m.Finding.Trace[lastIndex].Position = v
			}

			fmt.Printf("Position: %+v\n", v)
		case *osv.Entry:
			if v.ID == "" {
				notEmptyCheck(v)

				continue
			}

			found = true
			m.OSV = v
			fmt.Printf("OSV: %+v\n", v)
		}
	}

	if !found {
		fmt.Println("No known structure found")
	}
}
